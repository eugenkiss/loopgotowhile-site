This is the source code for the accompanying site & evaluation service for
the project [loopgotowhile][]. A live instance can be found [here][instance].
The evaluation service uses [Happstack][]. The editor functionality is provided
by [CodeMirror][]. The design of the site is inspired by [Homebrew][].

  [loopgotowhile]: https://github.com/eugenkiss/loopgotowhile
  [instance]: http://loopgotowhile.eugenkiss.com/
  [happstack]: http://happstack.com/
  [codemirror]: http://codemirror.net/
  [homebrew]: http://mxcl.github.com/homebrew/


How are the resources limited for the evaluation service?
---------------------------------------------------------

By using the `timeout` function computations that take longer than five seconds
are discarded. Mainly, this is needed to prevent infinite loops from keeping
the server busy forever.

The heap size for the created executable is limited as well so that the
server's memory will not be filled up completely.

To limit the CPU resources for this evaluation service you can use the program
[cpulimit][] on linux. For further information look
[here](http://maketecheasier.com/limit-cpu-usage-of-any-process-in-linux/2010/09/22).

  [cpulimit]: http://cpulimit.sourceforge.net/


What else is there to mention?
------------------------------

If you get an error like `mkTextEncoding: invalid argument` from the
statically-linked binary, try setting the `GCONV_PATH` environment variable
to point to the location of the codecs from the libc package, e.g. put `export
GCONV_PATH=/usr/lib/gconv` at the top of your `.bashrc` on the remote. See also
<http://blog.malde.org/index.php/2010/05/22/snagged/>.

For some reason it is very flaky to get both processes LGWServer and cpulimit 
running on the remote with fabric. It only works every fourth time or so.

If there would be an easy way to spit out Javascript from Haskell code I'd
rather do that and have the interpreters run on the client side instead of
running a program on the server.


What are some suggestions for future improvements?
--------------------------------------------------

### Evaluation Service

- I dont' like the current way of limiting computations with an MVar. There is 
  one global MVar, but I would like to have like 4 global MVars and only if all 
  are not empty disallow further compuations. Or I'd like to have an MVar that 
  is local to a process (or is it by default?), so that when I have 2 processes 
  2 concurrent compuations can occure but not more.
- Maybe change to Yesod? The memory usage of the evaluation service is too
  high imho. With Yesod, it seems, I could even go without nginx as Warp seems
  to be good enough to serve static content.


### Editor

- Implement loop, loop-strict, while, while-strict, goto, goto-strict
  CodeMirror modes so that there is syntax highlighting and smart indentation.
    - Change `enterMode` from `"keep"` to `"indent"` and `tabMode` from 
      `"shift"` to `"indent"`
    - Switch modes when selecting another input language or checking strict.


### Usability

- When clicking the "run" or "transform" button both of them should be disabled
  until the server responded. Better yet, the clicked button should drop down
  a bit into the background and be released again after a response (like a real
  button)
- The selects and the checkbox should be styled so that they fit the theme
  instead of relying on the standard browser styling.
